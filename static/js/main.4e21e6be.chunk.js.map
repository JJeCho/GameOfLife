{"version":3,"sources":["components/ToggleButton.js","lib/utils.js","components/GridControls.js","components/Tile.js","components/Grid.js","actions/grid.js","constants/ActionTypes.js","container/App.js","serviceWorker.js","store/configureStore.js","lib/grid.js","lib/game.js","reducers/grid.js","reducers/profiler.js","lib/profiler.js","reducers/index.js","index.js"],"names":["NO_OP","buttonClasses","on","cn","active","ToggleButton","_ref","label","_ref$onClick","onClass","offClass","onClick","react_default","a","createElement","htmlFor","className","id","style","display","type","onChange","randomizer","y","x","Math","random","GridControls","toggleAutoplay","tick","_this","props","profiler","startedAt","stop","actions","start","Date","now","frameId","window","requestAnimationFrame","cancelAnimationFrame","reset","_this$props","this","marginBottom","concat","role","disabled","renderFrameRate","frameRate","React","PureComponent","onMouseEvent","toggle","alive","e","nativeEvent","which","Tile","_ref$color","color","onMouseOver","onMouseDown","backgroundColor","renderRow","row","key","map","components_Tile","coordinates","current","renderTile","Grid","PropTypes","arrayOf","bool","data","createAction","connect","state","Object","objectSpread","dispatch","bindActionCreators","GridActions","GridControls_GridControls","components_Grid","grid","Boolean","location","hostname","match","initialState","FALSE","always","makeGrid","curry","cell","size","r","range","makeBlankGrid","set","i","value","xs","toConsumableArray","slice","getNeighbours","position","reduce","$y","_","offset","b","$x","combinePositions","_ref2","_ref3","slicedToArray","length","newKey","getIn","DEFAULT_STATE","actionHandlers","_actionHandlers","defineProperty","column","isAlive","neighbours","payload","_ref4","handleActions","ticks","profiler_actionHandlers","ceil","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e21e6be.chunk.js","sourcesContent":["import React from 'react'\r\nimport cn from 'classnames'\r\n\r\nconst NO_OP = () => null\r\n\r\nconst buttonClasses = (on) => cn('btn', 'btn-default', {\r\n  'active': on\r\n})\r\n\r\nexport default ({\r\n  on,\r\n  label,\r\n  onClass = 'fa-pause',\r\n  offClass = 'fa-play',\r\n  onClick = NO_OP\r\n}) => (\r\n  <label htmlFor='autoplay' className={buttonClasses(on)}>\r\n    <input\r\n      id='autoplay'\r\n      style={{ display: 'none' }}\r\n      type='checkbox'\r\n      onChange={onClick}\r\n    /> {label}\r\n  </label>\r\n)","export const randomizer = (y, x) => Math.random(x + y) > 0.8","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport ToggleButton from './ToggleButton'\r\nimport { randomizer } from '../lib/utils'\r\n\r\nexport default class GridControls extends React.PureComponent {\r\n  render () {\r\n    const { actions, profiler } = this.props\r\n    const marginBottom = `${(!profiler.frameId ? 20 : 0)}px`\r\n\r\n    return (\r\n      <div className='grid-controls'>\r\n        <div className='btn-group' role='group' style={{ marginBottom }}>\r\n          <button className='btn btn-danger' onClick={this.reset}>\r\n            RESET\r\n          </button>\r\n          <button className='btn btn-success' onClick={this.random}>\r\n            RANDOMIZE\r\n          </button>\r\n          <button className='btn btn-default' disabled={!!profiler.frameId} onClick={actions.tick}>\r\n            <i className='fa fa-fast-forward fa-lg' /> NEXT\r\n          </button>\r\n          <ToggleButton\r\n            label='AUTO'\r\n            on={profiler.startedAt}\r\n            onClick={this.toggleAutoplay(actions.tick)}\r\n          />\r\n        </div>\r\n        {this.renderFrameRate()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderFrameRate () {\r\n    if (!this.props.profiler.startedAt) {\r\n      return\r\n    }\r\n\r\n    return (\r\n      <div className='text-muted'>\r\n        {`${this.props.profiler.frameRate} fps`}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  toggleAutoplay = (tick) => () => {\r\n    if (this.props.profiler.startedAt) {\r\n      return this.stop()\r\n    }\r\n\r\n    this.props.actions.start(Date.now())\r\n    this.start(tick)\r\n  }\r\n\r\n  random = () => this.props.actions.random({ randomizer })\r\n\r\n  start = (tick) => tick({\r\n    frameId: window.requestAnimationFrame(() => this.start(tick)),\r\n    now: Date.now()\r\n  })\r\n\r\n  stop = () => {\r\n    window.cancelAnimationFrame(this.props.profiler.frameId)\r\n    this.props.actions.stop()\r\n  }\r\n\r\n  reset = () => {\r\n    if (this.props.profiler.startedAt) {\r\n      this.stop()\r\n    }\r\n    this.props.actions.reset()\r\n  }\r\n}\r\n\r\nGridControls.propTypes = {\r\n  profiler: PropTypes.object.isRequired,\r\n  actions: PropTypes.object.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst onMouseEvent = (toggle, alive) => (e) => {\r\n  if (e.nativeEvent.which !== 1) { return }\r\n  toggle(alive)\r\n}\r\n\r\nconst Tile = ({ alive, toggle, color = '#FFF' }) => (\r\n  <div className='grid-tile'\r\n    onMouseOver={onMouseEvent(toggle, alive)}\r\n    onMouseDown={onMouseEvent(toggle, alive)}\r\n    style={{ backgroundColor: alive ? color : null }}\r\n  />\r\n)\r\n\r\nTile.propTypes = {\r\n  alive: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n  color: PropTypes.string\r\n}\r\n\r\nexport default Tile","    \r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Tile from './Tile'\r\n\r\nconst renderTile = (toggle, y) => (alive, x) => (\r\n  <Tile\r\n    key={x}\r\n    alive={alive}\r\n    toggle={(alive) => toggle({\r\n      coordinates: { y, x },\r\n      current: alive\r\n    })}\r\n  />\r\n)\r\n\r\nconst renderRow = (toggle) => (row, y) => (\r\n  <div className='grid-row' key={y}>\r\n    {row.map(renderTile(toggle, y))}\r\n  </div>\r\n)\r\n\r\nconst Grid = ({ data, toggle }) => (\r\n  <div className='grid'>\r\n    {data.map(renderRow(toggle))}\r\n  </div>\r\n)\r\n\r\nexport const GridShape = PropTypes.arrayOf(\r\n  PropTypes.arrayOf(PropTypes.bool)\r\n)\r\n\r\nGrid.propTypes = {\r\n  data: GridShape.isRequired,\r\n  toggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Grid","import { createAction } from 'redux-actions'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\nexport const tick = createAction(types.TICK)\r\nexport const start = createAction(types.START)\r\nexport const stop = createAction(types.STOP)\r\nexport const toggle = createAction(types.TOGGLE)\r\nexport const reset = createAction(types.RESET)\r\nexport const random = createAction(types.RANDOM)","\r\nexport const START = 'START'\r\nexport const STOP = 'STOP'\r\nexport const TICK = 'TICK'\r\nexport const TOGGLE = 'TOGGLE'\r\nexport const RESET = 'RESET'\r\nexport const RANDOM = 'RANDOM'","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport GridControls from '../components/GridControls'\nimport Grid, { GridShape } from '../components/Grid'\nimport * as GridActions from '../actions/grid'\n\nconst App = (props) => (\n  <div>\n    <GridControls\n      actions={props.actions}\n      profiler={props.profiler}\n    />\n    <div>\n      <Grid\n        data={props.grid}\n        toggle={props.actions.toggle}\n      />\n    </div>\n  </div>\n)\n\nApp.propTypes = {\n  grid: GridShape.isRequired,\n  profiler: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default connect(\n  (state) => ({ ...state }),\n  (dispatch) => ({ actions: bindActionCreators(GridActions, dispatch) })\n)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux'\r\n\r\nimport rootReducer from '../reducers'\r\n\r\nexport default (initialState) => {\r\n  const store = createStore(rootReducer, initialState)\r\n\r\n  if (module.hot) {\r\n    module.hot.accept('../reducers', () => {\r\n      const nextReducer = require('../reducers')\r\n      store.replaceReducer(nextReducer)\r\n    })\r\n  }\r\n\r\n  return store\r\n}","import { curry, range, always } from 'ramda'\r\n\r\nconst FALSE = always(false)\r\n\r\nexport const makeGrid = curry((cell, size) => {\r\n  const r = range(0, size)\r\n  return r.map((y) => r.map((x) => cell(y, x)))\r\n})\r\n\r\nexport const makeBlankGrid = makeGrid(FALSE)","const set = (i, value, xs) => [\r\n    ...xs.slice(0, i),\r\n    value,\r\n    ...xs.slice(i + 1)\r\n  ]\r\n  \r\n  const newKey = (size) => (key) => {\r\n    if (key === -1) { return size - 1 }\r\n    if (key === size) { return 0 }\r\n    return key\r\n  }\r\n  \r\n  const newKeys = (size, keys) =>\r\n    keys.map(newKey(size))\r\n  \r\n  const combinePositions = ({ y, x }) =>\r\n    [-1, 0, 1].reduce((a, $y, _, offset) =>\r\n      offset.reduce((b, $x) =>\r\n        ($x || $y) ? [...b, [y + $y, x + $x]] : b,\r\n        a\r\n      ),\r\n      []\r\n    )\r\n  \r\n  const getIn = (grid) => (position) =>\r\n    (([y, x]) => grid[y][x])(newKeys(grid.length, position))\r\n  \r\n  export const getNeighbours = (grid, position) =>\r\n    combinePositions(position)\r\n      .map(getIn(grid))\r\n      .reduce((a, b) => a + b)\r\n  \r\n  export const willLive = (isAlive, neighbours) =>\r\n    isAlive\r\n      ? neighbours >= 2 && neighbours <= 3\r\n      : neighbours === 3\r\n  \r\n  export const nextState = (grid) =>\r\n    grid.map((row, y) =>\r\n      row.map((column, x) =>\r\n        willLive(column, getNeighbours(grid, { y, x }))\r\n      )\r\n    )\r\n  \r\n  export const toggle = ({ y, x }, current, grid) =>\r\n    set(y, set(x, +!current, grid[y]), grid)","import { handleActions } from 'redux-actions'\r\n\r\nimport * as types from '../constants/ActionTypes'\r\nimport { makeGrid, makeBlankGrid } from '../lib/grid'\r\nimport { nextState, toggle } from '../lib/game'\r\nimport { randomizer } from '../lib/utils'\r\n\r\nconst GRID_SIZE = 30\r\n\r\nconst DEFAULT_STATE = makeGrid(randomizer, GRID_SIZE)\r\n\r\nconst actionHandlers = {\r\n  [types.TICK]: nextState,\r\n  [types.RESET]: (state) =>\r\n    makeBlankGrid(GRID_SIZE, GRID_SIZE),\r\n  [types.RANDOM]: (state, { payload }) =>\r\n    makeGrid(payload.randomizer, GRID_SIZE),\r\n  [types.TOGGLE]: (state, { payload }) =>\r\n    toggle(payload.coordinates, payload.current, state)\r\n}\r\n\r\nexport default handleActions(\r\n  actionHandlers,\r\n  DEFAULT_STATE\r\n)","import { handleActions } from 'redux-actions'\r\n\r\nimport * as types from '../constants/ActionTypes'\r\nimport { calculateFrameRate } from '../lib/profiler'\r\n\r\nconst DEFAULT_STATE = {\r\n  frameId: null,\r\n  startedAt: null,\r\n  ticks: 0,\r\n  frameRate: null\r\n}\r\n\r\nconst actionHandlers = {\r\n  [types.STOP]: () => DEFAULT_STATE,\r\n  [types.START]: (state, { payload }) => ({\r\n    ...state,\r\n    startedAt: payload\r\n  }),\r\n  [types.TICK]: (state, { payload }) => ({\r\n    ...state,\r\n    ticks: state.ticks + 1,\r\n    frameId: payload.frameId,\r\n    frameRate: calculateFrameRate(state.ticks + 1, state.startedAt, payload.now)\r\n  })\r\n}\r\n\r\nexport default handleActions(\r\n  actionHandlers,\r\n  DEFAULT_STATE\r\n)","export const calculateFrameRate = (ticks, startedAt, now) =>\r\n  startedAt\r\n  ? Math.ceil(ticks / ((now - startedAt) / 1000))\r\n  : null","    \r\nimport { combineReducers } from 'redux'\r\nimport grid from './grid'\r\nimport profiler from './profiler'\r\n\r\nconst rootReducer = combineReducers({\r\n  grid,\r\n  profiler\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(<Provider store={store}><App /></Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}